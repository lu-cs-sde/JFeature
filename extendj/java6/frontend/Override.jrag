/* Copyright (c) 2011, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * The @Override annotation was changed in Java 6.
 *
 * The specification of the @Override annotation since Java 6:
 *
 * "If a method declaration is annotated with the annotation @Override,
 * but the method does not override or implement a method declared in a
 * supertype, or is not override-equivalent to a public method of Object,
 * a compile-time error will occur.
 *
 * In Java 5 the Override annotation was allowed for methods implementing
 * an interface-declared method.
 */
aspect Annotations {
  refine Annotations eq Annotation.overrideProblems() {
    if (decl().fullName().equals("java.lang.Override")
        && enclosingBodyDecl() instanceof MethodDecl) {
      MethodDecl method = (MethodDecl) enclosingBodyDecl();
      TypeDecl host = method.hostType();
      SimpleSet<MethodDecl> ancestors = host.ancestorMethods(method.signature());
      boolean found = false;
      for (MethodDecl decl : ancestors) {
        if (method.overrides(decl)) {
          found = true;
          break;
        }
      }
      if (!found) {
        TypeDecl typeObject = lookupType("java.lang", "Object");
        SimpleSet<MethodDecl> overrides = typeObject.localMethodsSignature(method.signature());
        if (overrides.isEmpty() || !overrides.iterator().next().isPublic()) {
          return Collections.singletonList(
              error("method does not override a method from a supertype"));
        }
      }
    }
    return Collections.emptyList();
  }
}
