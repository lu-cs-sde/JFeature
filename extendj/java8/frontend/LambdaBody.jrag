/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect LambdaBody {
  syn lazy boolean LambdaBody.isBlockBody();
  syn lazy boolean LambdaBody.isExprBody();

  eq BlockLambdaBody.isBlockBody() = true;
  eq BlockLambdaBody.isExprBody() = false;

  eq ExprLambdaBody.isBlockBody() = false;
  eq ExprLambdaBody.isExprBody() = true;
}

aspect ReturnCompatible {
  syn lazy boolean BlockLambdaBody.voidCompatible();
  syn lazy boolean BlockLambdaBody.valueCompatible();

  //15.27.2
  eq BlockLambdaBody.voidCompatible() = noReturnsHasResult();
  eq BlockLambdaBody.valueCompatible() = allReturnsHasResult() && !getBlock().canCompleteNormally();

  coll ArrayList<ReturnStmt> BlockLambdaBody.lambdaReturns()
      [new ArrayList<ReturnStmt>()]
      with add
      root Program;

  ReturnStmt contributes this
      when (enclosingLambda() != null) && (enclosingLambda().hostType() == hostType())
      to BlockLambdaBody.lambdaReturns()
      for (BlockLambdaBody) enclosingLambda().getLambdaBody();

  public boolean BlockLambdaBody.noReturnsHasResult() {
    ArrayList<ReturnStmt> returnList = lambdaReturns();
    for (int i = 0; i < returnList.size(); i++) {
      if (returnList.get(i).hasResult()) {
        return false;
      }
    }
    return true;
  }

  public boolean BlockLambdaBody.allReturnsHasResult() {
    ArrayList<ReturnStmt> returnList = lambdaReturns();
    for (int i = 0; i < returnList.size(); i++) {
      if (!returnList.get(i).hasResult()) {
        return false;
      }
    }
    return true;
  }
}
