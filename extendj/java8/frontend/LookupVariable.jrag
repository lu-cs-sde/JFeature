/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect VariableScope {
  inh lazy SimpleSet<Variable> LambdaBody.lookupVariable(String name);
  inh lazy SimpleSet<Variable> InferredParameterDeclaration.lookupVariable(String name);

  eq DeclaredLambdaParameters.getParameter().lookupVariable(String name) =
      parameterDeclaration(name);
  eq InferredLambdaParameters.getParameter().lookupVariable(String name) =
      parameterDeclaration(name);

  syn lazy SimpleSet<Variable> DeclaredLambdaParameters.parameterDeclaration(String name) {
    for (ParameterDeclaration param : getParameterList()) {
      if (param.name().equals(name)) {
        return param;
      }
    }
    return emptySet();
  }

  syn lazy SimpleSet<Variable> InferredLambdaParameters.parameterDeclaration(String name) {
    for (int i = 0; i < getNumParameter(); i++) {
      if (getParameter(i).name().equals(name)) {
        return (InferredParameterDeclaration) getParameter(i);
      }
    }
    return emptySet();
  }

  eq LambdaExpr.getLambdaBody().lookupVariable(String name) {
    if (getLambdaParameters() instanceof DeclaredLambdaParameters) {
      SimpleSet<Variable> decls = ((DeclaredLambdaParameters) getLambdaParameters())
          .parameterDeclaration(name);
      if (!decls.isEmpty()) {
        return decls;
      }
    } else if (getLambdaParameters() instanceof InferredLambdaParameters) {
      SimpleSet<Variable> decls = ((InferredLambdaParameters) getLambdaParameters())
          .parameterDeclaration(name);
      if (!decls.isEmpty()) {
        return decls;
      }
    }
    return lookupVariable(name);
  }
}

aspect VariableScopePropagation {
  LambdaExpr implements VariableScope;
}
