/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect PolyExpressions {
  syn lazy boolean Expr.isBooleanExpression() =
      !isPolyExpression() && type().isBoolean();

  eq ParExpr.isBooleanExpression() =
      getExpr().isBooleanExpression();

  eq ClassInstanceExpr.isBooleanExpression() {
    if (getAccess() instanceof TypeAccess) {
      TypeAccess typeAccess = (TypeAccess) getAccess();
      return typeAccess.name().equals("Boolean");
    }
    return false;
  }

  eq MethodAccess.isBooleanExpression() {
    MethodDecl decl = decl();
    if (decl instanceof ParMethodDecl) {
      return ((ParMethodDecl) decl).genericMethodDecl().type().isBoolean();
    } else {
      return decl.type().isBoolean();
    }
  }

  eq ConditionalExpr.isBooleanExpression() =
      isBooleanConditional();

  syn lazy boolean ConditionalExpr.isBooleanConditional() =
      getTrueExpr().isBooleanExpression() && getFalseExpr().isBooleanExpression()
      || getTrueExpr().isBooleanExpression() && getFalseExpr().isNullLiteral()
      || getFalseExpr().isBooleanExpression() && getTrueExpr().isNullLiteral();

  syn lazy boolean Expr.isNumericExpression() =
      !isPolyExpression() && type().isNumericType();

  eq MethodAccess.isNumericExpression() {
    MethodDecl decl = decl();
    if (decl instanceof ParMethodDecl) {
      return ((ParMethodDecl) decl).genericMethodDecl().type().isNumericType();
    } else {
      return decl.type().isNumericType();
    }
  }

  syn boolean Expr.isNullLiteral() = false;
  eq NullLiteral.isNullLiteral() = true;

  eq ConditionalExpr.isNumericExpression() =
      isNumericConditional();

  syn lazy boolean ConditionalExpr.isNumericConditional() =
      getTrueExpr().isNumericExpression() && getFalseExpr().isNumericExpression()
      || getTrueExpr().isNumericExpression() && getFalseExpr().isNullLiteral()
      || getFalseExpr().isNumericExpression() && getTrueExpr().isNullLiteral();

  syn lazy boolean ConditionalExpr.isReferenceConditional() =
      !isBooleanConditional() && !isNumericConditional();

  syn lazy boolean Expr.isPolyExpression() = false;

  eq ConditionalExpr.isPolyExpression() =
      isReferenceConditional() && (assignmentContext() || invocationContext());

  // 15.9
  eq ClassInstanceExpr.isPolyExpression() =
      (getAccess() instanceof DiamondAccess) && (assignmentContext() || invocationContext());

  // 15.8.5
  eq ParExpr.isPolyExpression() =
      getExpr().isPolyExpression();

  eq LambdaExpr.isPolyExpression() = true;
  eq MethodReference.isPolyExpression() = true;
  eq ConstructorReference.isPolyExpression() = true;

  // 15.12
  eq ParMethodAccess.isPolyExpression() = false;

  eq MethodAccess.isPolyExpression() {
    if (!assignmentContext() && !invocationContext()) {
      return false;
    }
    if (!decl().isGeneric()) {
      return false;
    }
    GenericMethodDecl genericDecl = decl().genericDecl();
    return genericDecl.typeVariableInReturn();
  }

  syn lazy boolean GenericMethodDecl.typeVariableInReturn() {
    if (!getTypeAccess().usesTypeVariable()) {
      return false;
    }
    ASTNode current = getTypeAccess();
    LinkedList<ASTNode> list = new LinkedList<ASTNode>();
    list.add(current);
    boolean foundUse = false;
    while (!list.isEmpty()) {
      current = list.poll();
      for (int i = 0; i < current.getNumChild(); i++) {
        list.add(current.getChild(i));
      }
      if (current instanceof TypeAccess) {
        TypeAccess typeAccess = (TypeAccess) current;
        if (typeAccess.type().isTypeVariable()) {
          for (int i = 0; i < getNumTypeParameter(); i++) {
            if (typeAccess.type() == getTypeParameter(i)) {
              foundUse = true;
              break;
            }
          }
          if (foundUse) {
            break;
          }
        }
      }
    }
    return foundUse;
  }

  // This can be used to check assignment compatibility without worrying about poly expressions type
  syn lazy boolean Expr.assignConversionTo(TypeDecl type) = type().assignConversionTo(type, this);

  eq LambdaExpr.assignConversionTo(TypeDecl type) {
    if (!type.isFunctionalInterface()) {
      return false;
    }
    FunctionDescriptor f = ((InterfaceDecl) type).functionDescriptor();
    return congruentTo(f);
  }

  eq MethodReference.assignConversionTo(TypeDecl type) {
    if (!type.isFunctionalInterface()) {
      return false;
    }
    FunctionDescriptor f = ((InterfaceDecl) type).functionDescriptor();
    return congruentTo(f);
  }

  eq ConstructorReference.assignConversionTo(TypeDecl type) {
    if (!type.isFunctionalInterface()) {
      return false;
    }
    FunctionDescriptor f = ((InterfaceDecl) type).functionDescriptor();
    return congruentTo(f);
  }

  eq ParExpr.assignConversionTo(TypeDecl type) =
      getExpr().assignConversionTo(type);

  eq ConditionalExpr.assignConversionTo(TypeDecl type) {
    if (!isPolyExpression()) {
      return type().assignConversionTo(type, this);
    } else {
      return getTrueExpr().assignConversionTo(type) && getFalseExpr().assignConversionTo(type);
    }
  }

  eq ClassInstanceExpr.assignConversionTo(TypeDecl type) {
    if (!isPolyExpression()) {
      return super.assignConversionTo(type);
    } else {
      return ((DiamondAccess) getAccess()).getTypeAccess().type().assignConversionTo(
          type, ((DiamondAccess) getAccess()).getTypeAccess());
    }
  }

}
