Expr cast_expression =
    LPAREN name.n LT type_argument_list_1.a dims.d? additional_bound_list.b RPAREN unary_expression_not_plus_minus.e @CAST
    {:  return new IntersectionCastExpr(new ParTypeAccess(n, a).addArrayDims(d), b, e);  :}
  | LPAREN name.n LT type_argument_list_1.a DOT class_or_interface_type.t dims.d? additional_bound_list.b RPAREN unary_expression_not_plus_minus.e @CAST
    {:  return new IntersectionCastExpr(new ParTypeAccess(n, a).qualifiesAccess(t).addArrayDims(d), b, e);  :}
;

Expr cast_expression =
   INTERCAST LPAREN name.t dims.d? additional_bound_list.b RPAREN unary_expression_not_plus_minus.e @CAST 
    {: return new IntersectionCastExpr(t.addArrayDims(d), b, e); :}
;