Expr primary_no_new_array = lambda_expression;

// The JLS now uses the following grammar:
//Expr expression = lambda_expression;
//Expr cast_expression =
//    LPAREN primitive_type.t dims.d? RPAREN lambda_expression.e  @CAST                                              {: return new CastExpr(t.addArrayDims(d), e); :}
//  | LPAREN name.t dims.d? RPAREN lambda_expression.e @CAST                                                         {: return new CastExpr(t.addArrayDims(d), e); :}
//  | LPAREN name.n LT type_argument_list_1.a dims.d? RPAREN lambda_expression.e @CAST                               {:  return new CastExpr(new ParTypeAccess(n, a).addArrayDims(d), e);  :}
//  | LPAREN name.n LT type_argument_list_1.a DOT class_or_interface_type.t dims.d? RPAREN lambda_expression.e @CAST {:  return new CastExpr(new ParTypeAccess(n, a).qualifiesAccess(t).addArrayDims(d), e);  :}
//  ;

Expr lambda_expression =
	LPAREN RPAREN RARROW lambda_body.b
		{: return new LambdaExpr(new DeclaredLambdaParameters(new List()), b); :}
;

Expr lambda_expression  =
	IDENTIFIER.i RARROW lambda_body.b
		{: return new LambdaExpr(new InferredLambdaParameters(new List().add(new InferredParameterDeclaration(i))), b); :}
;

Expr lambda_expression  =
	INFERRED_LAMBDA LPAREN IDENTIFIER.i RPAREN RARROW lambda_body.b
		{: return new LambdaExpr(new InferredLambdaParameters(new List().add(new InferredParameterDeclaration(i))), b); :}
;

Expr lambda_expression  =
	LPAREN IDENTIFIER.i COMMA inferred_list.l RPAREN RARROW lambda_body.b
		{: List list = new List().add(new InferredParameterDeclaration(i));
			for(Object o : l) list.add((InferredParameterDeclaration)o);
		return new LambdaExpr(new InferredLambdaParameters(list), b); :}
;

Expr lambda_expression =
	LPAREN nongeneric_formal_parameter.f RPAREN RARROW lambda_body.b
		{: return new LambdaExpr(new DeclaredLambdaParameters(new List().add(f)), b); :}

	| LPAREN nongeneric_formal_parameter.f comma_formal_parameter_list.l RPAREN RARROW lambda_body.b
		{: List list = new List().add(f);
			for(Object o : l) list.add((ParameterDeclaration)o); 
		return new LambdaExpr(new DeclaredLambdaParameters(list), b); :}

	| LPAREN modifiers.m? name.n LT type_argument_list_1.a dims.d1? IDENTIFIER.i dims.d2? RPAREN RARROW lambda_body.b
		{: return new LambdaExpr(new DeclaredLambdaParameters(
			new List().add(new ParameterDeclaration(new Modifiers(m), new ParTypeAccess(n, a).addArrayDims(d1).addArrayDims(d2), i))), b); :}

	| LPAREN modifiers.m? name.n LT type_argument_list_1.a dims.d1? IDENTIFIER.i dims.d2? comma_formal_parameter_list.l RPAREN RARROW lambda_body.b
		{: List list = new List().add(new ParameterDeclaration(new Modifiers(m), new ParTypeAccess(n, a).addArrayDims(d1).addArrayDims(d2), i));
			for(Object o : l) list.add((ParameterDeclaration)o);
		return new LambdaExpr(new DeclaredLambdaParameters(list), b); :}

	| LPAREN modifiers.m? name.n LT type_argument_list_1.a DOT class_or_interface_type.t dims.d1? IDENTIFIER.i dims.d2? RPAREN RARROW lambda_body.b 
		{: return new LambdaExpr(new DeclaredLambdaParameters(
			new List().add(new ParameterDeclaration(new Modifiers(m), new ParTypeAccess(n, a).qualifiesAccess(t).addArrayDims(d1).addArrayDims(d2), i))), b); :}

	| LPAREN modifiers.m? name.n LT type_argument_list_1.a DOT class_or_interface_type.t dims.d1? IDENTIFIER.i dims.d2? comma_formal_parameter_list.l RPAREN RARROW lambda_body.b 
		{: List list = new List().add(new ParameterDeclaration(new Modifiers(m), new ParTypeAccess(n, a).qualifiesAccess(t).addArrayDims(d1).addArrayDims(d2), i));
			for(Object o : l) list.add((ParameterDeclaration)o);
		return new LambdaExpr(new DeclaredLambdaParameters(list), b); :}

	//Must repeat to support variable arity parameters
	| LPAREN modifiers.m? name.n LT type_argument_list_1.a dims.d1? ELLIPSIS IDENTIFIER.i RPAREN RARROW lambda_body.b
		{: return new LambdaExpr(new DeclaredLambdaParameters(
			new List().add(new VariableArityParameterDeclaration(new Modifiers(m), new ParTypeAccess(n, a).addArrayDims(d1), i))), b); :}

	| LPAREN modifiers.m? name.n LT type_argument_list_1.a dims.d1? ELLIPSIS IDENTIFIER.i comma_formal_parameter_list.l RPAREN RARROW lambda_body.b
		{: List list = new List().add(new VariableArityParameterDeclaration(new Modifiers(m), new ParTypeAccess(n, a).addArrayDims(d1), i));
			for(Object o : l) list.add((VariableArityParameterDeclaration)o);
		return new LambdaExpr(new DeclaredLambdaParameters(list), b); :}

	| LPAREN modifiers.m? name.n LT type_argument_list_1.a DOT class_or_interface_type.t dims.d1? ELLIPSIS IDENTIFIER.i RPAREN RARROW lambda_body.b 
		{: return new LambdaExpr(new DeclaredLambdaParameters(
			new List().add(new VariableArityParameterDeclaration(new Modifiers(m), new ParTypeAccess(n, a).qualifiesAccess(t).addArrayDims(d1), i))), b); :}

	| LPAREN modifiers.m? name.n LT type_argument_list_1.a DOT class_or_interface_type.t dims.d1? ELLIPSIS IDENTIFIER.i comma_formal_parameter_list.l RPAREN RARROW lambda_body.b 
		{: List list = new List().add(new VariableArityParameterDeclaration(new Modifiers(m), new ParTypeAccess(n, a).qualifiesAccess(t).addArrayDims(d1), i)); 
			for(Object o : l) list.add((VariableArityParameterDeclaration)o);
		return new LambdaExpr(new DeclaredLambdaParameters(list), b); :}
;


List inferred_list = 
	 IDENTIFIER.i  {: return new List().add(new InferredParameterDeclaration(i)); :}
	| inferred_list.l COMMA IDENTIFIER.i {: return l.add(new InferredParameterDeclaration(i)); :}
;



List comma_formal_parameter_list =
	COMMA formal_parameter_list_no_vararg_mixed_array.l 
;

// Mixed array notation forbidden with varargs for lambdas, see 15.27.1
List formal_parameter_list_no_vararg_mixed_array =
    formal_parameter_no_vararg_mixed_array.f                                  {: return new List().add(f); :}
  | formal_parameter_list_no_vararg_mixed_array.l COMMA formal_parameter_no_vararg_mixed_array.f    {: return l.add(f); :}
  ;

ParameterDeclaration formal_parameter_no_vararg_mixed_array =
   modifiers.m? type.t IDENTIFIER.i dims.d?  {: return new ParameterDeclaration(new Modifiers(m), t.addArrayDims(d), i); :}
 | modifiers.m? type.t ELLIPSIS IDENTIFIER.i {: return new VariableArityParameterDeclaration(new Modifiers(m), t, i); :}
;

LambdaBody lambda_body =
	block.b {: return new BlockLambdaBody(b); :}
	| expression.e {: return new ExprLambdaBody(e); :}
;

