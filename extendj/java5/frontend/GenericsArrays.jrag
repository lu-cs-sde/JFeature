/* Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect GenericsArrays {
  refine Arrays eq TypeDecl.arrayType() {
    String name = name() + "[]";

    List body = new List();
    FieldDeclarator length = new FieldDeclarator(
        "length",
        new List<Dims>(),
        new Opt<Expr>());
    body.add(
      new FieldDecl(
          new Modifiers(new List<Modifier>(
              new Modifier("public"),
              new Modifier("final"))),
          new PrimitiveTypeAccess("int"),
          new List<FieldDeclarator>(length)
      )
    );
    MethodDecl clone = null;
    TypeDecl typeObject = typeObject();
    for (int i = 0; clone == null && i < typeObject.getNumBodyDecl(); i++) {
      if (typeObject.getBodyDecl(i) instanceof MethodDecl) {
        MethodDecl m = (MethodDecl) typeObject.getBodyDecl(i);
        if (m.name().equals("clone")) {
          clone = m;
        }
      }
    }
    if (clone != null) {
      body.add(
          // We create a substituted method that substitutes the clone method in object
          // this has the following two consequences: the return value will be cast to the
          // expected return type rather than object, and the invoked method will be the
          // method in object rather in the array.
          new MethodDeclSubstituted(
            new Modifiers(new List().add(new Modifier("public"))),
            new ArrayTypeAccess(createQualifiedAccess()),
            "clone",
            new List(),
            new List(),
            new Opt(new Block()),
            typeObject().memberMethods("clone").iterator().next()
          )
      );
    }
    TypeDecl typeDecl = new ArrayDecl(
        new Modifiers(new List().add(new Modifier("public"))),
        name,
        new Opt(typeObject().createQualifiedAccess()),
        new List().add(typeCloneable().createQualifiedAccess())
            .add(typeSerializable().createQualifiedAccess()),
        body
      );
    return typeDecl;
  }
}
