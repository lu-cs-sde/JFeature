/* Copyright (c) 2011-2015, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect ReifiableTypes {
  /**
   * A type is reifiable if it either refers to a non-parameterized type,
   * is a raw type, is a parameterized type with only unbound wildcard
   * parameters or is an array type with a reifiable type parameter.
   *
   * @see "JLS SE7 &sect;4.7"
   */
  syn boolean TypeDecl.isReifiable() = true;

  /**
   * We only check for wildcards in type parameter list when checking
   * reifiability. A wildcard type in general is not reifiable.
   */
  eq AbstractWildcardType.isReifiable() = false;

  /**
   * A type variable is never reifiable.
   * @return false
   */
  eq TypeVariable.isReifiable() = false;

  /**
   * A class is reifiable if its enclosing type is reifiable.
   */
  eq ClassDecl.isReifiable() = !isInnerClass() || enclosingType().isReifiable();

  eq GenericClassDecl.isReifiable() = false;

  /**
   * A parameterized type is reifiable only if it's
   * type parameters are all unbound wildcard types.
   */
  eq ParClassDecl.isReifiable() {
    if (original().isInnerClass() && !original().enclosingType().isReifiable()) {
      return false;
    }
    for (TypeDecl argument : getParameterization().args) {
      if (!argument.isUnboundedWildcard()) {
        return false;
      }
    }
    return true;
  }

  eq RawClassDecl.isReifiable() = true;

  eq GenericInterfaceDecl.isReifiable() = false;

  /**
   * A parameterized type is reifiable only if it's
   * type parameters are all unbound wildcard types.
   */
  eq ParInterfaceDecl.isReifiable() {
    for (TypeDecl argument : getParameterization().args) {
      if (!argument.isWildcard()) {
        return false;
      }
    }
    return true;
  }

  eq RawInterfaceDecl.isReifiable() = true;

  /**
   * An array type is reifiable only if the elements of the
   * array are reifiable.
   */
  eq ArrayDecl.isReifiable() = componentType().isReifiable();

  /**
   * WARNING: this attribute is not the same as TypeDecl.isWildcard,
   * which returns true for any wildcard type (even bounded wildcard types).
   * @return {@code true} if this is an unbounded wildcard access
   */
  syn boolean Access.isWildcard() = false;

  eq AbstractWildcard.isWildcard() = true;

  eq BoundTypeAccess.isWildcard() = getTypeDecl() instanceof WildcardType;
}

