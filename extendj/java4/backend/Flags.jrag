/* Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect Flags {
  public static final int Modifiers.ACC_PUBLIC       = 0x0001; // class field method
  public static final int Modifiers.ACC_PRIVATE      = 0x0002; //       field method
  public static final int Modifiers.ACC_PROTECTED    = 0x0004; //       field method
  public static final int Modifiers.ACC_STATIC       = 0x0008; //       field method
  public static final int Modifiers.ACC_FINAL        = 0x0010; // class field method
  public static final int Modifiers.ACC_SYNCHRONIZED = 0x0020; //             method
  public static final int Modifiers.ACC_SUPER        = 0x0020; // class
  public static final int Modifiers.ACC_VOLATILE     = 0x0040; //       field
  public static final int Modifiers.ACC_TRANSIENT    = 0x0080; //       field
  public static final int Modifiers.ACC_NATIVE       = 0x0100; //             method
  public static final int Modifiers.ACC_INTERFACE    = 0x0200; // class
  public static final int Modifiers.ACC_ABSTRACT     = 0x0400; // class       method
  public static final int Modifiers.ACC_SYNTHETIC    = 0x1000; //       field method
  public static final int Modifiers.ACC_STRICT       = 0x0800; //             method


  // Mangle modifiers for nested types.
  public int TypeDecl.mangledFlags(int flags) {
    boolean privateFlag = (flags & Modifiers.ACC_PRIVATE) != 0;
    boolean protectedFlag = (flags & Modifiers.ACC_PROTECTED) != 0;
    flags &= ~ Modifiers.ACC_PRIVATE;
    flags &= ~ Modifiers.ACC_PROTECTED;
    if (protectedFlag) {
      flags |= Modifiers.ACC_PUBLIC;
    }
    return flags;
  }

  syn lazy int MethodDecl.flags() {
    int res = 0;
    if (isPublic()) {
      res |= Modifiers.ACC_PUBLIC;
    }
    if (isPrivate()) {
      res |= Modifiers.ACC_PRIVATE;
    }
    if (isProtected()) {
      res |= Modifiers.ACC_PROTECTED;
    }
    if (isStatic()) {
      res |= Modifiers.ACC_STATIC;
    }
    if (isFinal()) {
      res |= Modifiers.ACC_FINAL;
    }
    if (isSynchronized()) {
      res |= Modifiers.ACC_SYNCHRONIZED;
    }
    if (isNative()) {
      res |= Modifiers.ACC_NATIVE;
    }
    if (isAbstract()) {
      res |= Modifiers.ACC_ABSTRACT;
    }
    if (isStrictfp() || (hostType().isStrictfp() && !hostType().isInterfaceDecl())) {
      res |= Modifiers.ACC_STRICT;
    }
    if (isSynthetic()) {
      res |= Modifiers.ACC_SYNTHETIC;
    }
    return res;
  }

  syn lazy int ConstructorDecl.flags() {
    int res = 0;
    if (isPublic()) {
      res |= Modifiers.ACC_PUBLIC;
    }
    if (isPrivate()) {
      res |= Modifiers.ACC_PRIVATE;
    }
    if (isProtected()) {
      res |= Modifiers.ACC_PROTECTED;
    }
    if (isSynthetic()) {
      res |= Modifiers.ACC_SYNTHETIC;
    }
    return res;
  }

  syn lazy int TypeDecl.flags() {
    int res = 0;
    if (isPublic()) {
      res |= Modifiers.ACC_PUBLIC;
    }
    if (isPrivate()) {
      res |= Modifiers.ACC_PRIVATE;
    }
    if (isProtected()) {
      res |= Modifiers.ACC_PROTECTED;
    }
    if (isStatic()) {
      res |= Modifiers.ACC_STATIC;
    }
    if (isFinal()) {
      res |= Modifiers.ACC_FINAL;
    }
    if (isAbstract()) {
      res |= Modifiers.ACC_ABSTRACT;
    }
    if (isSynthetic()) {
      res |= Modifiers.ACC_SYNTHETIC;
    }
    return res;
  }

  syn lazy int FieldDeclarator.flags() {
    int res = 0;
    if (isPublic()) {
      res |= Modifiers.ACC_PUBLIC;
    }
    if (isPrivate()) {
      res |= Modifiers.ACC_PRIVATE;
    }
    if (isProtected()) {
      res |= Modifiers.ACC_PROTECTED;
    }
    if (isStatic()) {
      res |= Modifiers.ACC_STATIC;
    }
    if (isFinal()) {
      res |= Modifiers.ACC_FINAL;
    }
    if (isVolatile()) {
      res |= Modifiers.ACC_VOLATILE;
    }
    if (isTransient()) {
      res |= Modifiers.ACC_TRANSIENT;
    }
    if (isSynthetic()) {
      res |= Modifiers.ACC_SYNTHETIC;
    }
    return res;
  }
}
